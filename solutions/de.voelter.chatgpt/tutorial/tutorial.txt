I have this XML format for describing questionnaires. I will explain this format to 
you. Please use it when providing answers to my prompts.

--------------

A questionnaire is enclosed by the <questionnaire> tag. It has a name attribute.
Inside a <questionnaire> there are a list of <field> tags each with a 
type and a type. Here is an example:

<questionnaire name="FeverQuestionnaire">
  <field name="measuredTemperature" type="int"/>
  <field name="doYouHaveAHeadache" type="boolean"/>
</questionnaire>


---------------

The data types that are available are int (for numbers), boolean (for truth values)
and enumerations. You have seen examples for int and boolean above. Here is an
example for an enum; it lists its literals in curly braces, separated by comma.

<questionnaire name="FeverQuestionnaire"/>
  <field name="gender" type="{male, female, other}"/>
</questionnaire>

----------------

Questionnaires can also contain calculations. They are meant to compute
derived data from the data captured in fields. Here is an example regarding fever:

<questionnaire name="FeverQuestionnaire">
  <field name="measuredTemperature" type="int"/>
  <calc name="overtemp">
    <minus>
		<fieldref name="measuredTemperature"/>	    	
	  	<intLit value="38"/>
    </minus>
  </calc>
</questionnaire>

A calculation contains an expression represented as an abstract syntax
tree. This example here subtracts 38 from the value of the measuredTemperature field.
The fieldref tag refers to other fields or calculations by name. 
Only fields or calculations in the current form can be referenced with the fieldref tag.

In addition to <minus>, there is also <plus>, <mul> and <div>. They have
the same structure in which the two arguments are listed as child elements.

----------------------------------

The expressions in calculations can be nested. For example, to represent
"38 - measuredTemperature + 1", one would write:

<plus>
	<minus>
		<fieldref name="measuredTemperature"/>	    	
	  	<intLit value="38"/>
	</minus>
	<intLit value="1"/>
</plus>

----------------

There are also logical expressions, <and> as well as <or>. And there is also 
an <if> expression that takes three children (ie., arguments). The first one
is the condition, the second one is the resulting value in case the condition
is true, and the third one is the value of the "if" in case the condition is false.
Here is an example:

  <calc name="overallSleepQuality">
    <div>
      <plus>
        <fieldref name="hoursOfSleep"/>
        <if>
          <and>
            <fieldref name="difficultyFallingAsleep"/>
            <fieldref name="wakingUpDuringNight"/>
          </and>
          <intLit value="1"/>
          <intLit value="0"/>
        </if>
      </plus>
      <if>
        <and>
          <fieldref name="feelingRefreshed"/>
          <fieldref name="dreaming"/>
        </and>
        <intLit value="1"/>
        <intLit value="0"/>
      </if>
    </div>
  </calc>

There is also "greaterThan", "lessThan", "equals" and "notEquals". And finally,
there's a <booleanLit> with attribute "value" that can be "true" or "false".
There is also <stringLit value='someText'/>. Finally, you can add precedence
to operations by enclosing them in parentheses like this:

 <div>
	<fieldref name="weight"/>
    <parens>
		<mul>
			<fieldref name="height"/>
            <fieldref name="height"/>
		</mul>
	</parens>
</div>

Finally, you can also refer to enum literals using 

  <litref value="nameOfTheLiteral"/>

Do not use any other expression structures, don't make up ones that feel similar.
Only use the ones introduced explicitly.

----------------

Sometimes "if" expressions become too complicated. So there is another
way to express conditionals, similar to a switch in C or Java.

<alternatives>
  <case>
  	<condition>put the first condition expression here</condition>
  	<value>put the first value here</value>
  </case>
  <case>
  	<condition>put the second condition expression here</condition>
  	<value>put the second value here</value>
  </case>
  ... and so on.
</alternatives>

You can use as many <case> tags as you need, each with its own 
<condition> and <value>