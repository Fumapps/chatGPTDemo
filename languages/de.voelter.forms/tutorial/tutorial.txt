I have this XML format for describing questionnaire forms. I will explain this format to 
you. Please use it when providing answers to my prompts.

--------------

A form is enclosed by the <form> tag. It has a name attribute.
Inside a <form> there are a list of <field> tags each with a 
type and a type. Here is an example:

<form name="FeverForm">
  <field name="measuredTemperature" type="int"/>
  <field name="doYouHaveAHeadache" type="boolean"/>
</form>


---------------

The data types that are available are int (for numbers), boolean (for truth values)
and enumerations. You have seen examples for int and boolean above. Here is an
example for an enum; it lists its literals in curly braces, separated by comma.

<form name="FeverForm"/>
  <field name="gender" type="{male, female, other}"/>
</form>

----------------

Forms can also contain calculations. They are meant to compute
derived data from the data captured in fields. Here is an example regarding fever:

<form name="FeverForm">
  <field name="measuredTemperature" type="int"/>
  <calc name="overtemp">
    <minus>
		<fieldref value="measuredTemperature"/>	    	
	  	<intLit value="38"/>
    </minus>
  </calc>
</form>

A calculation contains an expression represented as an abstract syntax
tree. This example here subtracts 38 from the value of the measuredTemperature field.
The fieldref tag refers to other fields or calculations by name. 
Only fields or calculations in the current form can be referenced with the fieldref tag.

---------------

Note that right under <calc> there can only be one expression tag. The expressions
themselves can be nested according to the rules I give below. But there must be
only one XML tag directly under the <calc> tag.

In addition to <minus>, there is also <plus>, <mul> and <div>. They have
the same structure in which the two arguments are listed as child elements.

----------------------------------

The expressions in calculations can be nested. For example, to represent
"38 - measuredTemperature + 1", one would write:

<plus>
	<minus>
		<fieldref value="measuredTemperature"/>	    	
	  	<intLit value="38"/>
	</minus>
	<intLit value="1"/>
</plus>

----------------

There are also logical expressions, <and> as well as <or>. And there is also 
an <if> expression that takes three children (ie., arguments). The first one
is the condition, the second one is the resulting value in case the condition
is true, and the third one is the value of the "if" in case the condition is false.
Here is an example:

  <calc name="overallSleepQuality">
    <div>
      <plus>
        <fieldref value="hoursOfSleep"/>
        <if>
          <and>
            <fieldref value="difficultyFallingAsleep"/>
            <fieldref value="wakingUpDuringNight"/>
          </and>
          <intLit value="1"/>
          <intLit value="0"/>
        </if>
      </plus>
      <if>
        <and>
          <fieldref value="feelingRefreshed"/>
          <fieldref value="dreaming"/>
        </and>
        <intLit value="1"/>
        <intLit value="0"/>
      </if>
    </div>
  </calc>
  
----------------------------

There is also "greaterThan", "lessThan", "equals" and "notEquals". And finally,
there's a <booleanLit> with attribute "value" that can be "true" or "false".
There is also <stringLit value='someText'/>. Finally, you can add precedence
to operations by enclosing them in parentheses like this:

 <div>
	<fieldref value="weight"/>
    <parens>
		<mul>
			<fieldref value="height"/>
            <fieldref value="height"/>
		</mul>
	</parens>
</div>

Finally, you can also refer to enum literals using 

  <litref value="nameOfTheLiteral"/>

Do not use any other expression structures, don't make up ones that feel similar.
Only use the ones introduced explicitly.

---------------

<plus>, <minus>, <mul>, <div>, <greaterThan>, <lessThan>, <equals> and <notEquals>
are binary expressions. They can only have two arguments. So in this XML format,
they can and must each have to child tags.

----------------

Sometimes "if" expressions become too complicated. So there is another
way to express conditionals, similar to a switch in C or Java.

<alternatives>
  <case>
  	...
  </case>
  <case>
  	...
  </case>
  ... and so on.
</alternatives>

You can use as many <case> tags as you need. A Case has two child expressions.
The first one is the condition, and the second one is the value. The semantics
is that if the condition is true, the value is returned.

--------------------

Finally, there is a simple test language for the forms. The syntax is straightforward:

<test form="TheFormYouWantToTest">
  <set field="fieldname" value="42"/>
  <check calc="calculation name" value="99"/>
</test>

A test should have a setter for each of the fields, and a check for each 
of the calculations. The value used in the check should be correct
relative to the logic in the form itself.


